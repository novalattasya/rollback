--- 
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import Link from '@/components/Link.astro'
import PostHead from '@/components/PostHead.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import SubpostsHeader from '@/components/SubpostsHeader.astro'
import SubpostsSidebar from '@/components/SubpostsSidebar.astro'
import TOCHeader from '@/components/TOCHeader.astro'
import TOCSidebar from '@/components/TOCSidebar.astro'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import Layout from '@/layouts/Layout.astro'
import {
  getAdjacentPosts,
  getAllPostsAndSubposts,
  getCombinedReadingTime,
  getParentId,
  getParentPost,
  getPostReadingTime,
  getSubpostCount,
  getTOCSections,
  hasSubposts,
  isSubpost,
  parseAuthors,
} from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { render } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getAllPostsAndSubposts()
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

const post = Astro.props
const currentPostId = Astro.params.id
const { Content, headings } = await render(post)
const authors = await parseAuthors(post.data.authors ?? [])

const isCurrentSubpost = isSubpost(currentPostId)
const navigation = await getAdjacentPosts(currentPostId)
const parentPost = isCurrentSubpost ? await getParentPost(currentPostId) : null

const hasChildPosts = await hasSubposts(currentPostId)
const subpostCount = !isCurrentSubpost
  ? await getSubpostCount(currentPostId)
  : 0
const postReadingTime = await getPostReadingTime(currentPostId)
const combinedReadingTime =
  hasChildPosts && !isCurrentSubpost
    ? await getCombinedReadingTime(currentPostId)
    : null

const tocSections = await getTOCSections(currentPostId)
---

<Layout class="max-w-none w-full px-8 lg:px-16">
  <PostHead slot="head" post={post} />
  <div class="max-w-[1600px] mx-auto w-full">
    {
      (hasChildPosts || isCurrentSubpost) && (
        <div class="mb-4">
          <SubpostsHeader
            parentId={isCurrentSubpost ? getParentId(currentPostId) : currentPostId}
          />
        </div>
      )
    }
    <div class="mb-6">
      <Breadcrumbs
        items={[ 
          { href: '/blog', label: 'Blog', icon: 'lucide:library-big' },
          ...(isCurrentSubpost && parentPost
            ? [
                {
                  href: `/blog/${parentPost.id}`,
                  label: parentPost.data.title,
                  icon: 'lucide:book-open',
                },
                {
                  href: `/blog/${currentPostId}`,
                  label: post.data.title,
                  icon: 'lucide:file-text',
                },
              ]
            : [
                {
                  href: `/blog/${currentPostId}`,
                  label: post.data.title,
                  icon: 'lucide:book-open-text',
                },
              ]),
        ]}
      />
    </div>
    {
      post.data.image && (
        <div class="mb-6">
          <Image
            src={post.data.image}
            alt={post.data.title}
            width={1200}
            height={630}
            class="w-full h-auto max-h-[600px] object-cover rounded-md"
          />
        </div>
      )
    }
    <header class="mb-8">
      <div class="flex flex-col items-start gap-y-4">
        <h1 id="post-title" class="text-3xl sm:text-4xl leading-tight font-medium">
          {post.data.title}
        </h1>

        <div class="text-muted-foreground flex flex-wrap items-center gap-4 text-sm">
          {
            authors.length > 0 && (
              <div class="flex items-center gap-3">
                {authors.map((author) => (
                  <div class="flex items-center gap-x-2">
                    <Image
                      src={author.avatar}
                      alt={author.name}
                      width={28}
                      height={28}
                      class="rounded-full"
                    />
                    {author.isRegistered ? (
                      <Link href={`/authors/${author.id}`} underline class="text-foreground">
                        <span>{author.name}</span>
                      </Link>
                    ) : (
                      <span>{author.name}</span>
                    )}
                  </div>
                ))}
              </div>
            )
          }

          <div>{formatDate(post.data.date)}</div>
          <div>
            {postReadingTime}
            {
              combinedReadingTime &&
                combinedReadingTime !== postReadingTime && (
                  <span class="text-muted-foreground"> ({combinedReadingTime} total)</span>
                )
            }
          </div>

          {
            subpostCount > 0 && (
              <div class="flex items-center gap-1">
                <Icon name="lucide:file-text" class="size-4" />
                <span>{subpostCount} subpost{subpostCount === 1 ? '' : 's'}</span>
              </div>
            )
          }
        </div>
        <div class="flex flex-wrap gap-2 mt-2">
          {
            post.data.tags &&
              post.data.tags.length > 0 &&
              post.data.tags.map((tag) => (
                <a href={`/tags/${tag}`} class={badgeVariants({ variant: 'muted' })}>
                  <Icon name="lucide:hash" class="size-3" />
                  {tag}
                </a>
              ))
          }
        </div>
      </div>
    </header>
    <div class="grid grid-cols-1 lg:grid-cols-[1fr_300px] gap-8">
      <main class="prose max-w-none">
        <article>
          <Content />
        </article>
        <div class="mt-10">
          <PostNavigation
            newerPost={navigation.newer}
            olderPost={navigation.older}
            parentPost={isCurrentSubpost ? navigation.parent : undefined}
          />
        </div>
      </main>
      <aside class="hidden lg:block">
        <div class="sticky top-28 space-y-6">
          {
            tocSections.length > 0 && (
              <TOCSidebar sections={tocSections} currentPostId={currentPostId} />
            )
          }

          {
            (hasChildPosts || isCurrentSubpost) && (
              <SubpostsSidebar
                parentId={isCurrentSubpost ? getParentId(currentPostId) : currentPostId}
                className="w-64"
              />
            )
          }
        </div>
      </aside>
    </div>
  </div>
  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>
  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>
<script>
  if (document.querySelector('.katex')) {
    if (!document.querySelector('link[href*="katex.min.css"]')) {
      const link = document.createElement('link')
      link.rel = 'stylesheet'
      link.href =
        'https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css'
      document.head.appendChild(link)
    }
  }
</script>
